<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>readme.md</title>
		<dateModified>Sat, 28 May 2022 18:55:48 GMT</dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="readme.md">
		<outline text="# appserver">
			<outline text="A new release of nodeStorage that removes all the historical addons, streamlines configuration, only serves from the local file system, and serves the home page of the app. It could be thought of as v2.0 of nodeStorage except it is not backward compatible. "></outline>
			</outline>
		<outline text="### Overview">
			<outline text="Over the years nodeStorage got a lot of appendages and add-ons that most apps don't use. "></outline>
			<outline text="The configuration file was confusing and not well documented."></outline>
			<outline text="It was one of the first things I wrote for Node, and I learned a lot over time."></outline>
			<outline text="FInally when one of my programming partners had difficulty understanding the code, I realizaed I did too, and decided to rebuild it from scratch using components I had already developed, such as davehttp, davetwitter, etc. "></outline>
			<outline text="I have converted Little Outliner to use this backend. The app was only modified in how it's configured. Everything else remains the same. It uses the same api glue file that it used to access nodeStorage. "></outline>
			</outline>
		<outline text="### Configuring">
			<outline text="Below is an example of config.json file that goes in the same directory as the appserver.js file."></outline>
			</outline>
		<outline text="### Example">
			<outline text="&lt;%includeExample (&quot;example1&quot;)%&gt;"></outline>
			</outline>
		<outline text="### Explanation">
			<outline text="The first section provides configuration information about and to the app that's running on the server's home page.  ">
				<outline text="1. productName is an id that can be used to identify the product. No specified use."></outline>
				<outline text="2. productNameForDisplay is what the app should use in its user interface."></outline>
				<outline text="3. urlServerHomePageSource is the address of an HTML page that is served through the home page of the server. It can contain macros that plug in values from the server. "></outline>
				<outline text="4. prefsPath is the name of the prefs file for the app. This is the file you should read and save to, to maintain the state of the app for the user. "></outline>
				<outline text="5. docsPath is where the documents for this app are stored in the user's storage on the server."></outline>
				<outline text="6. urlServerForClient is the address the app uses to call back to the server. "></outline>
				<outline text="7. urlWebsocketServerForClient is the address of the web socket that reports on changes to files stored on the server. This address can be included in the app files so that apps that read the files can subbscribe to changes. "></outline>
				</outline>
			<outline text="The second section configures the HTTP server and the connection to Twitter for identity. ">
				<outline text="1. port is the port the HTTP server will run on, unless process.env.PORT is specified. It overrides the port choice in the config file."></outline>
				<outline text="2. flWebsocketEnabled, a boolean, determines whether or not we initialize the websocket server, if it's true then websocketPort is the port it's listening on. "></outline>
				<outline text="3. myDomain, the domain assigned to this app. It's the domain you'd use to access the home page. If that includes a port, include the port in this value."></outline>
				<outline text="4. twitterConsumerKey and twitterConsumerSecret are the values that identify the app for Twitter, as assigned on developer.twitter.com. "></outline>
				</outline>
			</outline>
		<outline created="Wed, 15 Sep 2021 14:19:02 GMT" text="### Updates">
			<outline created="Sat, 28 May 2022 18:54:36 GMT" text="#### v0.5.48 -- 3/18/22 by DW">
				<outline created="Sat, 28 May 2022 18:54:39 GMT" text="Exports three routines: fileExists, readWholeFile, writeWholeFile."></outline>
				</outline>
			<outline created="Fri, 18 Mar 2022 14:21:28 GMT" text="#### v0.5.44 -- 3/18/22 by DW">
				<outline created="Fri, 18 Mar 2022 14:21:59 GMT" text="New callback, config.publishFile. If defined we call back with the file, screenname, relpath, flprivate, filetext and the url of the file if it's public."></outline>
				<outline created="Fri, 18 Mar 2022 14:22:36 GMT" text="It's called when we handle a /publishfile or /writewholefile message."></outline>
				</outline>
			<outline created="Sat, 04 Dec 2021 21:29:57 GMT" text="#### v0.5.32 -- 12/4/21 by DW">
				<outline created="Sat, 04 Dec 2021 21:30:33 GMT" text="Added a new callback, publicFileSaved, which is called when the user updates a public file. "></outline>
				<outline created="Sat, 04 Dec 2021 21:29:58 GMT" text="Fixed a bug where a user couldn't create a new file if their public files folder was empty. "></outline>
				</outline>
			<outline created="Wed, 15 Sep 2021 14:19:10 GMT" text="#### v0.5.32 -- 9/26/21 by DW">
				<outline created="Wed, 15 Sep 2021 14:19:12 GMT" text="Fixed the example app to require &quot;../appserver.js&quot; instead of &quot;lib/daveappserver.js&quot; which only exists on my development machine. "></outline>
				</outline>
			<outline created="Wed, 15 Sep 2021 14:19:10 GMT" text="#### v0.5.31 -- 9/15/21 by DW">
				<outline created="Wed, 15 Sep 2021 14:19:12 GMT" text="writeWholeFile was meant to be sure the path to the file exists before writing the file. It wasn't doing it, now it does. "></outline>
				</outline>
			</outline>
		</body>
	</opml>
