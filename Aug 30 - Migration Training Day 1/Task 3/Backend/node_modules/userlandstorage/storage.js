var myProductName = "userlandStorage", myVersion = "0.4.2";

exports.start = start;

exports.initFile = initFile;
exports.getFileId = getFileId;
exports.createFile = createFile;
exports.updateFile = updateFile;
exports.readFile = readFile;
exports.deleteFile = deleteFile;
exports.servePublicFile = servePublicFile;
exports.handleHttpRequest = handleHttpRequest; //7/20/24 by DW

const fs = require ("fs");
const utils = require ("daveutils"); 
const davesql = require ("davesql");
const dateFormat = require ("dateformat");

var config = {
	domainPublicUserFiles: "userland.scripting.com",
	urlPublicUserFiles: "https://userland.scripting.com/"
	};

function cantFindFileMessage (idfile, username) { //7/29/24 by DW
	return ("Can't find the file whose id is " + idfile + " for the user " + username + ".");
	}
function mergeOptions (userOptions, options) {
	if (userOptions !== undefined) {
		for (x in userOptions) {
			if (userOptions [x] !== undefined) {
				options [x] = userOptions [x];
				}
			}
		}
	}
function encodeValuesForCreating (theStruct) {
	for (var x in theStruct) { //convert booleans
		if (theStruct [x] !== undefined) {
			var val = theStruct [x];
			if (typeof val === "boolean") {
				val = (val) ? 1 : 0;
				}
			theStruct [x] = val;
			}
		}
	const encodedValues = davesql.encodeValues (theStruct);
	return (encodedValues);
	}
function encodeValuesForUpdating (theValues) { 
	var s = "";
	for (var x in theValues) {
		if (s.length > 0) {
			s += ", ";
			}
		s += x + "=" + davesql.encode (theValues [x]);
		}
	return (s);
	}
function getExtraData (fileRec) {
	function getUrlPublic (fileRec) {
		var urlPublic = undefined;
		if (!fileRec.flprivate) { //5/16/24 by DW
			urlPublic = config.urlPublicUserFiles + fileRec.username + "/" + fileRec.relpath;
			}
		return (urlPublic);
		}
	const extraData = {
		urlPublic: getUrlPublic (fileRec)
		}
	return (extraData);
	}
function formatDateTime (when) { 
	return (dateFormat (new Date (when), "dddd mmmm d, yyyy; h:MM TT Z"));
	}


function getFileId (fileRec, callback) {
	var sqltext = "select * from storage where username=" + davesql.encode (fileRec.username) + " and relpath=" + davesql.encode (fileRec.relpath) + ";";
	davesql.runSqltext (sqltext, function (err, result) {
		if (err) {
			callback (err);
			}
		else {
			if (result.length == 0) {
				const message = "Can't find the file " + fileRec.relpath + " for the user " + fileRec.username + ".";
				callback ({message});
				}
			else {
				const theFileRec = result [0];
				callback (undefined, theFileRec.id);
				}
			}
		});
	}
function initFile (fileRec, callback) {
	getFileId (fileRec, function (err, id) {
		if (err) {
			createFile (fileRec, function (err, theNewFile) {
				if (err) {
					callback (err);
					}
				else {
					callback (undefined, theNewFile.id);
					}
				});
			}
		else {
			callback (undefined, id);
			}
		});
	}
function createFile (fileRecParam, callback) { 
	var fileRec = {
		username: undefined, 
		relpath: undefined, 
		type: utils.httpExt2MIME (utils.stringLastField (fileRecParam.relpath, ".")), //7/28/24 by DW
		filecontents: "",
		flprivate: true,
		metadata: "{}"
		};
	mergeOptions (fileRecParam, fileRec);
	
	const sqltext = "insert into storage " + encodeValuesForCreating (fileRec);
	davesql.runSqltext (sqltext, function (err, result) {
		if (err) {
			callback (err);
			}
		else {
			fileRec.id = result.insertId;
			callback (undefined, fileRec, getExtraData (fileRec));
			}
		});
	}
function readFile (idfile, username, callback) {
	var sqltext = "select * from storage where id = " + davesql.encode (idfile) + " and username = " + davesql.encode (username) + ";"; //7/29/24 by DW
	davesql.runSqltext (sqltext, function (err, result) {
		if (err) {
			callback (err);
			}
		else {
			if (result.length == 0) {
				const message = cantFindFileMessage (idfile, username);
				callback ({message});
				}
			else {
				const theFileRec = result [0];
				callback (undefined, theFileRec);
				}
			}
		});
	}
function updateFile (idfile, fileRec, username, callback) {
	var newFileRec = new Object (); //7/18/24 by DW
	for (var x in fileRec) {
		const lowerx = utils.stringLower (x);
		if ((lowerx != "whenupdated") && (lowerx != "whencreated")) {
			newFileRec [x] = fileRec [x];
			}
		}
	const sqltext = "update storage set " + encodeValuesForUpdating (newFileRec) + ", ctUpdates = ctUpdates + 1 where id = " + davesql.encode (idfile) + " and username = " + davesql.encode (username) + ";";
	davesql.runSqltext (sqltext, function (err, result) {
		if (err) {
			callback (err);
			}
		else {
			if (result.affectedRows == 0) {
				const message = cantFindFileMessage (idfile, username);
				callback ({message});
				}
			else {
				fileRec.id = idfile;
				callback (undefined, fileRec, getExtraData  (fileRec));
				}
			}
		});
	}
function deleteFile (idfile, username, callback) {
	const sqltext = "delete from storage where id = " + davesql.encode (idfile) + " and username = " + davesql.encode (username) + ";";
	davesql.runSqltext (sqltext, function (err, result) {
		if (err) {
			callback (err);
			}
		else {
			if (result.length == 0) {
				const message = cantFindFileMessage (idfile, username);
				callback ({message});
				}
			else {
				callback (undefined, true);
				}
			}
		});
	}

function publishSubOutline (idfile, username, idsuboutline, jsontext, callback) { //8/10/24 by DW
	console.log ("publishSubOutline: idfile == " + idfile + ", idsuboutline == " + idsuboutline + ", jsontext.length == " + jsontext.length);
	
	function getSecsFromDate (theDate) {
		const d = new Date (theDate);
		
		const hours = d.getHours ();
		const minutes = d.getMinutes ();
		const seconds = d.getSeconds ();
		
		return ((hours * 3600) + (minutes * 60) + seconds);
		}
	function getDescriptionHtml (item) {
		function dolevel (item) {
			if (item.subs === undefined) {
				return (item.text);
				}
			else {
				var htmltext = "";
				item.subs.forEach (function (subitem) {
					htmltext += "<p>" + subitem.text + "</p>";
					if (subitem.subs !== undefined) {
						htmltext += "<blockquote>" + dolevel (subitem) + "</blockquote>";
						}
					});
				return (htmltext);
				}
			}
		return (dolevel (item));
		}
	function renderOutline (node, callback) {
		fs.readFile ("template.html", function (err, templateText) {
			if (err) {
				console.log ("publishSubOutline: templateFile == " + templateFile + ", err.message == " + err.message);
				}
			else {
				const pagetable = {
					bodytext: getDescriptionHtml (node),
					postTitle: node.text,
					postTime: formatDateTime (node.created)
					};
				const pagetext = utils.multipleReplaceAll (templateText.toString (), pagetable, false, "[%", "%]");
				callback (undefined, pagetext);
				}
			});
		}
	
	var jstruct;
	try {
		jstruct = JSON.parse (jsontext);
		}
	catch (err) {
		callback (err);
		return;
		}
	
	renderOutline (jstruct, function (err, htmltext) {
		const relpath = utils.getDatePath (jstruct.created) + getSecsFromDate (jstruct.created) + ".html";
		const fileRec = {
			username,
			relpath,
			filecontents: htmltext,
			flprivate: false
			};
		
		console.log ("publishSubOutline: fileRec == " + utils.jsonStringify (fileRec));
		
		initFile (fileRec, function (err, id) {
			if (err) {
				callback (err);
				}
			else {
				updateFile (id, fileRec, username, function (err, newFileRec) {
					if (err) {
						callback (err);
						}
					else {
						newFileRec.url = config.urlPublicUserFiles + username + "/" + relpath; //8/12/24 by DW
						callback (undefined, newFileRec);
						}
					});
				}
			});
		});
	}

function servePublicFile (relpath, callback) { //4/30/24 by DW
	if (utils.beginsWith (relpath, "/")) {
		relpath = utils.stringDelete (relpath, 1, 1);
		}
	const parts = relpath.split ("/");
	if (parts.length < 2) {
		return (false);
		}
	const username = parts [0];
	if (username.length == 0) {
		return (false);
		}
	
	relpath = utils.stringDelete (relpath, 1, username.length + 1);
	if (relpath.length == 0) {
		return (false);
		}
	
	const sqltext = "select * from  storage where username = " + davesql.encode (username) + " and relpath = " + davesql.encode (relpath) + ";";
	console.log ("\nservePublicFile: relpath == " + relpath + ", sqltext == " + sqltext + "\n");
	
	davesql.runSqltext (sqltext, function (err, result) {
		if (err) {
			callback (500, "text/plain", err.message);
			}
		else {
			if (result.length == 0) {
				callback (404, "text/plain", "Not found");
				}
			else {
				const fileRec = result [0];
				if (utils.getBoolean (fileRec.flprivate)) {
					callback (403, "text/plain", "Forbidden");
					}
				else {
					callback (200, fileRec.type, fileRec.filecontents);
					}
				}
			}
		});
	
	return (true); //the request was for us
	}

function handleHttpRequest (theRequest, callWithIdentity) { //7/20/24 by DW
	const now = new Date ();
	const params = theRequest.params;
	const relpath = params.relpath;
	const idfile = params.idfile;
	
	var filerecParam = undefined;
	if (params.filerec !== undefined) {
		try {
			filerecParam = JSON.parse (params.filerec);
			}
		catch (err) {
			}
		}
	
	function httpReturn (err, returnedValue) {
		function returnData (jstruct) {
			if (jstruct === undefined) {
				jstruct = {};
				}
			theRequest.httpReturn (200, "application/json", utils.jsonStringify (jstruct));
			}
		function returnError (jstruct) {
			theRequest.httpReturn (500, "application/json", utils.jsonStringify (jstruct));
			}
		function returnJsontext (jsontext) { //9/14/22 by DW
			theRequest.httpReturn (200, "application/json", jsontext.toString ());
			}
		if (err) {
			returnError (err);
			}
		else {
			if (typeof returnedValue == "object") {
				returnData (returnedValue);
				}
			else {
				returnJsontext (returnedValue); //9/14/22 by DW
				}
			}
		}
	
	switch (theRequest.method) {
		case "POST":
			
			function getPostBodyAsFileRec (username) {
				const body = theRequest.postBody.toString ();
				const fileRec = JSON.parse (body);
				fileRec.username = username; //the caller doesn't get to set this
				return (fileRec);
				}
			
			switch (theRequest.lowerpath) {
				case "/createfile":
					callWithIdentity (function (username) {
						const fileRec = getPostBodyAsFileRec (username);
						createFile (fileRec, httpReturn);
						});
					return (true);
				case "/initfile": 
					callWithIdentity (function (username) {
						const fileRec = getPostBodyAsFileRec (username);
						initFile (fileRec, httpReturn);
						});
					return (true);
				case "/updatefile": 
					callWithIdentity (function (username) {
						const fileRec = getPostBodyAsFileRec (username);
						updateFile (idfile, fileRec, username, httpReturn);
						});
					return (true);
				default:
					return (false);
				}
		case "GET":
			switch (theRequest.lowerpath) {
				case "/getfileid": 
					callWithIdentity (function (username) {
						getFileId ({username, relpath}, httpReturn);
						});
					return (true);
				case "/readfile": 
					callWithIdentity (function (username) {
						readFile (idfile, username, httpReturn);
						});
					return (true);
				case "/deletefile": 
					callWithIdentity (function (username) {
						deleteFile (idfile, username, httpReturn);
						});
					return (true);
				
				case "/publishsuboutline": //8/10/24 by DW
					callWithIdentity (function (username) {
						publishSubOutline (idfile, username, params.idsuboutline, params.jsontext, httpReturn);
						});
					return (true);
				
				default: 
					if (theRequest.lowerhost == utils.stringLower (config.domainPublicUserFiles)) { //8/6/24 by DW
						const flconsumed = servePublicFile (theRequest.lowerpath, function (code, type, text) {
							console.log ("storage.handleHttpRequest: code == " + code + ", type == " + type + ", text == " + text);
							theRequest.httpReturn (code, type, text);
							});
						return (flconsumed); 
						}
					return (false); //not consumed
				}
			break;
		}
	return (false); //not consumed
	}

function start (userOptions, callback) {
	mergeOptions (userOptions, config);
	callback ();
	}
