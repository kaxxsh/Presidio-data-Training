const fs = require ("fs");
const utils = require ("daveutils"); 
const davesql = require ("davesql");
const storage = require ("userlandstorage");

var config = {
	};

function storageTest () { 
	var ct = 0, idTestFile = undefined;
	const maxct = 60;
	
	function everyMinute () {
		const whenstart = new Date ();
		if (ct++ < maxct) {
			storage.readFile (idTestFile, function (err, fileRec) {
				if (err) {
					console.log ("everyMinute: err.message == " + err.message);
					}
				else {
					const jstruct = JSON.parse (fileRec.filecontents);
					jstruct.ctMinutesRunning++;
					jstruct.currentSlogan = utils.getRandomSnarkySlogan ();
					jstruct.localTime= new Date ().toLocaleString ();
					fileRec.filecontents = utils.jsonStringify (jstruct);
					storage.updateFile (idTestFile, fileRec, function (err, theSavedFile) {
						if (err) {
							console.log ("storageTest: err.message == " +  err.message);
							}
						else {
							console.log ("storageTest: " + whenstart.toLocaleTimeString () + ", " + utils.secondsSince (whenstart) + " secs");
							}
						});
					}
				});
			}
		}
	
	const initialStruct = {
		ctMinutesRunning: 0,
		currentSlogan: undefined,
		localTime: undefined
		};
	const fileRec = {
		username: "bullmancuso",
		relpath: "testStruct1.json",
		filecontents: utils.jsonStringify (initialStruct),
		type: "application/json",
		flprivate: false
		}
	storage.initFile (fileRec, function (err, id) {
		if (err) {
			console.log ("storage.initFile: err.message == " + err.message);
			}
		else {
			idTestFile = id;
			console.log ("storage.initFile: idTestFile == " + idTestFile);
			everyMinute (); 
			utils.runEveryMinute (everyMinute);
			}
		});
	}
function createAndDeleteFileTest (callback) {
	const fileRec = {
		username: "davewiner",
		relpath: "test.txt",
		filecontents: "hello",
		flprivate: true
		}
	storage.createFile (fileRec, function (err, theNewFile) {
		if (err) {
			console.log ("storage.createFile: err.message == " +  err.message);
			callback ();
			}
		else {
			console.log ("storage.createFile: theSavedFile == " + utils.jsonStringify (theNewFile));
			storage.deleteFile (theNewFile.id, function (err, data) {
				if (err) {
					console.log ("storage.deleteFile: id == " + id + ", err.message == " + err.message);
					callback ();
					}
				else {
					console.log ("storage.deleteFile: theNewFile.id == " + theNewFile.id + ", data == " + utils.jsonStringify (data));
					callback ();
					}
				});
			}
		});
	}
function serveFileTest (callback) {
	const flconsumed = storage.servePublicFile ("bullmancuso/testStruct1.json", function (code, type, text) {
		console.log ("serveFileTest: code == " + code + ", type == " + type + ", text == " + text);
		callback ();
		});
	if (!flconsumed) {
		console.log ("serveFileTest: flconsumed == " + flconsumed);
		callback ();
		}
	}

function readConfig (f, theConfig, callback) { 
	fs.readFile (f, function (err, jsontext) {
		if (err) {
			console.log ("readConfig: err.message == " + err.message);
			}
		else {
			try {
				var jstruct = JSON.parse (jsontext);
				for (var x in jstruct) {
					theConfig [x] = jstruct [x];
					}
				}
			catch (err) {
				console.log ("readConfig: err.message == " + err.message);
				}
			}
		callback ();
		});
	}
readConfig ("config.json", config, function (err) {
	console.log ("config == " + utils.jsonStringify (config));
	davesql.start (config.database, function () {
		storage.start (config, function () {
			serveFileTest (function () {
				createAndDeleteFileTest (function () {
					storageTest ();
					});
				});
			});
		});
	});
