{"version":3,"sources":["../index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["\n/**\n * Module dependencies.\n */\nimport WPError from 'wp-error';\nimport superagent from 'superagent';\nimport debugFactory from 'debug';\n\n/**\n * Module variables\n */\nconst debug = debugFactory( 'wpcom-xhr-request' );\n\n/**\n * Defauts\n */\nconst defaults = {\n\tapiVersion: '1',\n\tapiNamespace: 'wp/v2',\n\tauthToken: null,\n\tbody: null,\n\tformData: null,\n\theaders: null,\n\tmethod: 'get',\n\tquery: null,\n\tprocessResponseInEnvelopeMode: true,\n\tonStreamRecord: () => {},\n\tproxyOrigin: 'https://public-api.wordpress.com',\n\turl: ''\n};\n\n/**\n * Send the request\n *\n * @param  {Superagent} req - request instance\n * @param  {Object} settings - request settings\n * @param  {Function} fn - callback function\n * @return {Superagent} request instance\n */\nconst sendResponse = ( req, settings, fn ) => {\n\tconst {\n\t\tisEnvelopeMode,\n\t\tisRestAPI,\n\t\tprocessResponseInEnvelopeMode,\n\t\tonStreamRecord,\n\t} = settings;\n\n\treq.end( ( error, response ) => {\n\t\tif ( error && ! response ) {\n\t\t\treturn fn( error );\n\t\t}\n\n\t\tlet { body, headers, statusCode } = response;\n\t\tconst processResponseInStreamMode = shouldProcessInStreamMode( headers[ 'content-type' ] );\n\n\t\tif ( ! req.xhr ) {\n\t\t\t// node\n\t\t\tif ( processResponseInStreamMode ) {\n\t\t\t\tconst error = new Error( 'stream mode processing is not yet implemented for Node.js' );\n\t\t\t\treturn fn( error, body, headers );\n\t\t\t}\n\t\t}\n\n\t\tconst { ok } = response;\n\t\tconst { path, method } = response.req;\n\t\theaders.status = statusCode;\n\n\t\tif ( ok ) {\n\t\t\t// Endpoints in stream mode always send enveloped responses (see below).\n\t\t\tif ( ( isEnvelopeMode && processResponseInEnvelopeMode ) || processResponseInStreamMode ) {\n\t\t\t\t// override `error`, body` and `headers`\n\t\t\t\tif ( isRestAPI ) {\n\t\t\t\t\theaders = body.headers;\n\t\t\t\t\tstatusCode = body.code;\n\t\t\t\t\tbody = body.body;\n\t\t\t\t} else {\n\t\t\t\t\theaders = body.headers;\n\t\t\t\t\tstatusCode = body.status;\n\t\t\t\t\tbody = body.body;\n\t\t\t\t}\n\n\t\t\t\theaders.status = statusCode;\n\n\t\t\t\tif ( null !== statusCode && 2 !== Math.floor( statusCode / 100 ) ) {\n\t\t\t\t\tdebug( 'Error detected!' );\n\t\t\t\t\tconst wpe = WPError( { path, method }, statusCode, body );\n\t\t\t\t\treturn fn( wpe, null, headers );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn fn( null, body, headers );\n\t\t}\n\n\t\tconst wpe = WPError( { path, method }, statusCode, body );\n\t\treturn fn( wpe, null, headers );\n\t} );\n\n\tif ( req.xhr ) {\n\t\t// web\n\t\treq.xhr.addEventListener( 'readystatechange', event => {\n\t\t\tif ( event.target.readyState !== XMLHttpRequest.HEADERS_RECEIVED ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( shouldProcessInStreamMode( event.target.getResponseHeader( 'Content-Type' ) ) ) {\n\t\t\t\tenableStreamModeProcessing( req, onStreamRecord );\n\t\t\t}\n\t\t} );\n\t}\n\n\treturn req;\n};\n\nfunction shouldProcessInStreamMode( contentType ) {\n\treturn /^application[/]x-ndjson($|;)/.test( contentType );\n}\n\n// Endpoints in stream mode behave like ordinary endpoints, in that the response contains a JSON\n// representation of some value or WP_Error, but they will also stream other JSON records before\n// that (e.g. progress messages), in application/x-ndjson format.\n//\n// The intent is for the last line of a $stream mode response to be exactly the same as the non-\n// $stream response, but always enveloped as if we were in ?_envelope=1. The other JSON records\n// are also enveloped in the same way, but with .status == 100.\n//\n// One might object to enveloping as a matter of principle, but it’s unavoidable in both of these\n// cases. For the last line, which represents the whole response in non-$stream mode, we need to\n// convey the HTTP status code after the body has started. For the other lines, we need a way to\n// distinguish them from the last line, so we can exclude them without a “delay line”.\nfunction enableStreamModeProcessing( req, onStreamRecord ) {\n\t// Streaming responses is trickier than you might expect, with many footguns:\n\t// • req.buffer(false): no version of superagent implements this when running in the browser\n\t// • req.parse() or superagent.parse[]: only gets called when the response ends (see above)\n\t// • req.on(\"progress\"): doesn’t seem to work... at all\n\t// • req.responseType(anything): makes superagent skip parse functions (see above)\n\t// • req.xhr.responseType=\"blob\": XHR only exposes partial responses in \"\" or \"text\" modes\n\t// • req.xhr: only available after you call req.end()\n\n\t// Expose partial responses.\n\t// <https://xhr.spec.whatwg.org/#the-response-attribute>\n\treq.xhr.responseType = 'text';\n\n\t// Find response chunks that end in a newline (possibly preceded by a carriage return), then\n\t// for each chunk except the last, parse it as JSON and pass that to onStreamRecord.\n\t// <https://github.com/ndjson/ndjson-spec/blob/1.0/README.md#31-serialization>\n\t// <https://github.com/ndjson/ndjson-spec/blob/1.0/README.md#32-parsing>\n\t// <https://stackoverflow.com/a/38440028>\n\tlet lastLine = null;\n\tlet start = 0;\n\n\t// A progress event is guaranteed to be fired after the end of the response body, so we\n\t// should never miss any data.\n\t// <https://xhr.spec.whatwg.org/#the-send()-method>\n\t// <https://xhr.spec.whatwg.org/#handle-response-end-of-body>\n\treq.xhr.addEventListener( 'progress', ( { target } ) => {\n\t\t// Don’t use ProgressEvent#loaded in this algorithm. It measures progress in octets,\n\t\t// while we’re working with text that has already been decoded from UTF-8 into a string\n\t\t// that can only be indexed in UTF-16 code units. Reconciling this difference is not\n\t\t// worth the effort, and might even be impossible if there were encoding errors.\n\t\twhile ( true ) {\n\t\t\tconst stop = target.response.indexOf( '\\n', start );\n\n\t\t\tif ( stop < 0 ) {\n\t\t\t\t// Leave start untouched for the next progress event, waiting for the newline\n\t\t\t\t// that indicates we’ve finished receiving a full line.\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlastLine = target.response.slice( start, stop );\n\n\t\t\t// Parse the response chunk as JSON, ignoring trailing carriage returns.\n\t\t\t// Note: not ignoring empty lines.\n\t\t\t// <https://github.com/ndjson/ndjson-spec/blob/1.0/README.md#32-parsing>\n\t\t\tconst record = JSON.parse( lastLine );\n\n\t\t\t// Non-last lines should have .status == 100.\n\t\t\tif ( record.status < 200 ) {\n\t\t\t\tdebug( 'stream mode: record=%o', record );\n\t\t\t\tonStreamRecord( record.body );\n\t\t\t}\n\n\t\t\t// Make subsequent searches start *after* the newline.\n\t\t\tstart = stop + 1;\n\t\t}\n\t} );\n\n\t// Parse the last response chunk as above, but pass it to the higher layers as The Response.\n\t// Note: not ignoring empty lines.\n\t// <https://github.com/ndjson/ndjson-spec/blob/1.0/README.md#32-parsing>\n\treq.parse( () => JSON.parse( lastLine ) );\n}\n\n/**\n * Returns `true` if `v` is a File Form Data, `false` otherwise.\n *\n * @param {Mixed} v - instance to analize\n * @return {Boolean} `true` if `v` is a DOM File instance\n * @private\n */\nfunction isFile( v ) {\n\treturn v instanceof Object &&\n\t\t'undefined' !== typeof( Blob ) &&\n\t\tv.fileContents instanceof Blob;\n}\n\n/**\n * Performs an XMLHttpRequest against the WordPress.com REST API.\n *\n * @param {Object|String} options - `request path` or `request parameters`\n * @param {Function} fn - callback function\n * @return { XHR } xhr instance\n * @api public\n */\nexport default function request( options, fn ) {\n\tif ( 'string' === typeof options ) {\n\t\toptions = { path: options };\n\t}\n\n\tconst settings = Object.assign( {}, defaults, options );\n\n\t// is REST-API api?\n\tsettings.isRestAPI = options.apiNamespace === undefined;\n\n\t// normalize request-method name\n\tsettings.method = settings.method.toLowerCase();\n\n\tconst {\n\t\tapiNamespace,\n\t\tapiVersion,\n\t\tauthToken,\n\t\tbody,\n\t\tformData,\n\t\theaders,\n\t\tisRestAPI,\n\t\tmethod,\n\t\tquery,\n\t\tproxyOrigin\n\t} = settings;\n\n\t// request base path\n\tlet basePath;\n\n\tif ( isRestAPI ) {\n\t\tbasePath = `/rest/v${ apiVersion }`;\n\t} else if ( apiNamespace && /\\//.test( apiNamespace ) ) {\n\t\tbasePath = '/' + apiNamespace;\t// wpcom/v2\n\t} else {\n\t\tbasePath = '/wp-json'; // /wp-json/sites/%s/wpcom/v2 (deprecated)\n\t}\n\n\t// Envelope mode FALSE as default\n\tsettings.isEnvelopeMode = false;\n\n\tsettings.url = proxyOrigin + basePath + settings.path;\n\tdebug( 'API URL: %o', settings.url );\n\n\t// create HTTP Request instance\n\tconst req = superagent[ method ]( settings.url );\n\n\t// querystring\n\tif ( query ) {\n\t\treq.query( query );\n\t\tdebug( 'API send URL querystring: %o', query );\n\n\t\tsettings.isEnvelopeMode = isRestAPI ? query.http_envelope : query._envelope;\n\t\tdebug( 'envelope mode: %o', settings.isEnvelopeMode );\n\t}\n\n\t// body\n\tif ( body && formData ) {\n\t\tdebug( 'API ignoring body because formData is set. They cannot both be used together.' );\n\t}\n\tif ( body && ! formData ) {\n\t\treq.send( body );\n\t\tdebug( 'API send POST body: %o', body );\n\t}\n\n\t// POST FormData (for `multipart/form-data`, usually a file upload)\n\tif ( formData ) {\n\t\tfor ( let i = 0; i < formData.length; i++ ) {\n\t\t\tconst data = formData[ i ];\n\t\t\tconst key = data[ 0 ];\n\t\t\tconst value = data[ 1 ];\n\t\t\tdebug( 'adding FormData field %o: %o', key, value );\n\n\t\t\tif ( isFile( value ) ) {\n\t\t\t\treq.attach( key, new File( [ value.fileContents ], value.fileName ) );\n\t\t\t} else {\n\t\t\t\treq.field( key, value );\n\t\t\t}\n\t\t}\n\t}\n\n\t// headers\n\tif ( headers ) {\n\t\treq.set( headers );\n\t\tdebug( 'adding HTTP headers: %o', headers );\n\t}\n\n\tif ( authToken ) {\n\t\treq.set( 'Authorization', `Bearer ${ authToken }` );\n\t}\n\n\tif ( ! req.get( 'Accept' ) ) {\n\t\t// set a default \"Accept\" header preferring a JSON response\n\t\treq.set( 'Accept', '*/json,*/*' );\n\t}\n\n\tsendResponse( req, settings, fn );\n\n\treturn req.xhr;\n}\n"]}