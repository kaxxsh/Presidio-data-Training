<?xml version="1.0" encoding="ISO-8859-1"?>
<opml version="2.0">
	<head>
		<title>readme.md</title>
		<dateModified>Tue, 25 Oct 2022 16:35:11 GMT</dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body created="Fri, 02 Jul 2021 14:57:47 GMT" text="readme.md">
		<outline created="Fri, 02 Jul 2021 14:57:50 GMT" text="# opml package">
			<outline created="Sun, 04 Jul 2021 17:13:30 GMT" text="A developer's toolkit for OPML support. Node and browser-based JavaScript code that reads and writes OPML."></outline>
			</outline>
		<outline created="Sun, 04 Jul 2021 16:08:57 GMT" text="#### What is OPML and why should we use it?">
			<outline created="Sun, 04 Jul 2021 16:09:06 GMT" text="OPML is an XML-based format designed to store and exchange outlines with attributes. "></outline>
			<outline created="Sun, 04 Jul 2021 16:09:35 GMT" text="It's been around since the &lt;a href=&quot;http://scripting.com/davenet/2000/09/24/opml10.html&quot;&gt;early 2000s&lt;/a&gt;, and is widely used in the RSS world to exchange subscription lists. "></outline>
			<outline created="Sun, 04 Jul 2021 16:10:07 GMT" text="It's also a standard for interop among outliners. If you support OPML, our products will interop, and our users will be able to use all our products on their data. "></outline>
			</outline>
		<outline created="Sun, 04 Jul 2021 16:17:23 GMT" text="#### Why this package?">
			<outline created="Sun, 04 Jul 2021 16:17:31 GMT" text="I wanted to make it really easy for developers to add basic OPML support to their apps."></outline>
			<outline created="Sun, 04 Jul 2021 16:18:27 GMT" text="So I put the basic code you need to read and write OPML files, code that's debugged, used in other apps, including my own. It's known to work, to respect the format, and be easy to deploy."></outline>
			<outline created="Sun, 04 Jul 2021 16:19:08 GMT" text="There are other ways to read OPML, and that's very good. The more support there is, the more interop and that's the goal. I'm going to accumulate links to resources for OPML developers. If you have something you think they could use, send me an email at the address in the package.json file above. "></outline>
			<outline created="Sun, 04 Jul 2021 17:44:59 GMT" text="I recorded a &lt;a href=&quot;http://scripting.com/2021/07/04/myPitchForOpml.m4a&quot;&gt;podcast&lt;/a&gt; explaining all this. :-)"></outline>
			</outline>
		<outline created="Sun, 04 Jul 2021 16:11:18 GMT" text="#### What's in this package?">
			<outline created="Sun, 04 Jul 2021 16:11:35 GMT" text="JavaScript code to parse and stringify OPML.">
				<outline created="Sun, 04 Jul 2021 23:18:03 GMT" text="* opml.parse -- turns OPML text into a JavaScript structure representing the OPML."></outline>
				<outline created="Sun, 04 Jul 2021 23:18:10 GMT" text="* opml.stringify -- takes the JavaScript structure and turns it into OPML text."></outline>
				<outline created="Sun, 04 Jul 2021 23:16:21 GMT" text="* opml.htmlify -- a simple routine to display outlines in HTML."></outline>
				<outline created="Sun, 04 Jul 2021 23:16:27 GMT" text="* opml.visitAll -- a routine that visits all the nodes in an outline."></outline>
				</outline>
			</outline>
		<outline created="Sat, 03 Jul 2021 20:14:58 GMT" text="#### The Node package">
			<outline created="Sat, 03 Jul 2021 20:15:04 GMT" text="It's on &lt;a href=&quot;https://www.npmjs.com/package/opml&quot;&gt;NPM&lt;/a&gt;, it's called OPML."></outline>
			<outline created="Sat, 03 Jul 2021 20:15:15 GMT" text="Here's a snippet that reads an OPML file, converts it to a JavaScript object, displays it to the console via JSON.stringify.">
				<outline text="&lt;%includeExample (&quot;example1&quot;)%&gt;"></outline>
				</outline>
			<outline created="Sat, 03 Jul 2021 20:32:48 GMT" text="The full Node example is &lt;a href=&quot;https://github.com/scripting/opmlPackage/blob/main/examples/parsing/test.js&quot;&gt;here&lt;/a&gt;. "></outline>
			</outline>
		<outline created="Sat, 03 Jul 2021 20:33:29 GMT" text="#### OPML in the browser">
			<outline created="Sat, 03 Jul 2021 20:33:39 GMT" text="The same routines are available for JavaScript code running in the browser. "></outline>
			<outline created="Sat, 03 Jul 2021 20:34:11 GMT" text="See the &lt;a href=&quot;https://github.com/scripting/opmlPackage/tree/main/client&quot;&gt;example&lt;/a&gt;. You have to include &lt;a href=&quot;e/blob/main/client/opml.js&quot;&gt;opml.js&lt;/a&gt; in your app, as the example does. "></outline>
			<outline created="Sun, 04 Jul 2021 16:43:50 GMT" text="You can &lt;a href=&quot;http://scripting.com/code/opmlpackage/examples/browser/&quot;&gt;run the example&lt;/a&gt; right now, without downloading the repo."></outline>
			<outline created="Sun, 04 Jul 2021 16:22:10 GMT" text="The &lt;a href=&quot;https://github.com/scripting/opmlPackage/tree/main/examples/browser&quot;&gt;example app&lt;/a&gt; includes the Bootstrap Toolkit, the Ubuntu font and jQuery. The OPML parsing and generating code does not depend on the first two, they're just used in the example app. opml.js uses jQuery, but otherwise should be completely self-contained, i.e. it does not depend on any other files."></outline>
			</outline>
		<outline created="Sun, 04 Jul 2021 16:34:50 GMT" text="#### Other OPML projects">
			<outline created="Sun, 04 Jul 2021 16:34:57 GMT" text="I have a few OPML-related projects on GitHub and on the web. ">
				<outline created="Sun, 04 Jul 2021 16:35:32 GMT" text="* &lt;a href=&quot;http://drummer.scripting.com/&quot;&gt;Drummer&lt;/a&gt; -- Browser and Electron-based outliner that uses OPML as its native format. "></outline>
				<outline created="Mon, 05 Jul 2021 12:59:51 GMT" text="* &lt;a href=&quot;http://this.how/opmlChecklist/&quot;&gt;OPML Developer checklist&lt;/a&gt;. Examples, source code and advice for people adapting outliners to read and write OPML."></outline>
				<outline created="Sun, 04 Jul 2021 16:35:22 GMT" text="* &lt;a href=&quot;https://github.com/scripting/instantOutlines&quot;&gt;instantOutlines&lt;/a&gt; -- Example code for sharing live-updated outlines between users, using websockets as the notification system."></outline>
				<outline created="Mon, 05 Jul 2021 12:59:32 GMT" text="* &lt;a href=&quot;http://dev.opml.org/spec2.html&quot;&gt;OPML 2.0 spec&lt;/a&gt;."></outline>
				<outline created="Sun, 04 Jul 2021 16:37:12 GMT" text="* etc."></outline>
				</outline>
			</outline>
		<outline created="Sun, 04 Jul 2021 16:34:50 GMT" text="#### Updates">
			<outline created="Tue, 25 Oct 2022 16:32:44 GMT" text="#### v0.5.0 -- 10/25/22 by DW">
				<outline created="Wed, 11 May 2022 15:00:50 GMT" text="New function -- opml.readOutline. A simple bit of recurring code. Reads an outline over the web returns a standard outline object. "></outline>
				<outline created="Tue, 25 Oct 2022 16:33:34 GMT" text="It's time to start a fresh sequence of versions with 0.5.0. No breakage, of course. ;-)"></outline>
				</outline>
			<outline created="Wed, 11 May 2022 15:00:49 GMT" text="#### v0.4.24 -- 5/11/22 by DW">
				<outline created="Wed, 11 May 2022 15:00:50 GMT" text="New function -- opml.expandIncludes."></outline>
				<outline created="Wed, 11 May 2022 15:02:03 GMT" text="Takes two params, an outline that could possibly have include nodes, and a callback, that receives a copy of the outline with includes expanded. "></outline>
				<outline created="Wed, 11 May 2022 15:02:59 GMT" text="It doesn't stop for errors. This was much-debated internally, but there is linkrot and an outline with includes should work as well as it possibly can, as a blog with one broken link still works."></outline>
				<outline created="Wed, 11 May 2022 15:11:07 GMT" text="It is only available in the Node version, but it could be adapted to work in the client if opml.expandInclude (sic) is converted. "></outline>
				<outline created="Wed, 11 May 2022 15:11:34 GMT" text="BTW, sorry for the closeness in the names, expandInclude and expandIncludes, but it is correct, one is singular and the other is plural. "></outline>
				</outline>
			<outline created="Fri, 18 Mar 2022 15:28:34 GMT" text="#### v0.4.23 -- 3/18/22 by DW">
				<outline created="Fri, 18 Mar 2022 15:28:35 GMT" text="opml.visitAll is now defined in both the Node and browser versions. Previously it was only defined in browser version."></outline>
				</outline>
			<outline created="Wed, 12 Jan 2022 22:22:24 GMT" text="#### v0.4.22 -- 1/12/22 by DW">
				<outline created="Wed, 12 Jan 2022 22:22:25 GMT" text="New optional param on markdownToOutline, options, an object. "></outline>
				<outline created="Wed, 12 Jan 2022 22:22:54 GMT" text="And options.flAddUnderscores, defaults true. If true, we add underscores before attribute names coming from the markdown, so we know to restore them when converting back to markdown."></outline>
				<outline created="Wed, 12 Jan 2022 22:23:38 GMT" text="But sometimes the outline is going to OPML, and on to a processor where you want it to recognize its name without the underscore. "></outline>
				<outline created="Wed, 12 Jan 2022 22:24:09 GMT" text="When we're publishing a blog from a LogSeq markdown outline is an example. "></outline>
				</outline>
			<outline created="Sat, 08 Jan 2022 16:01:59 GMT" text="#### v0.4.21 -- 1/8/22 by DW">
				<outline created="Sat, 08 Jan 2022 16:02:00 GMT" text="There was some confusion about whether or not we should try to handle head-level atts in the markdown format, and in the end I decided not to try to do that at this time. Before doing this I have to understand much better what's going on on the other side of the interop. At this stage, whatever I do is going to be wrong, and will have to be grandfathered in for perpetuity. We have a pretty good ability to interop on the content of the outlines, but different products see the file-level metadata very differently. If there ever is an agreement on how this should work it's going to happen later. "></outline>
				<outline created="Sat, 08 Jan 2022 16:05:13 GMT" text="However I did fix a problem, if a head-level att does appear as we import, we don't try to attach it to undefined. "></outline>
				</outline>
			<outline created="Tue, 04 Jan 2022 22:56:12 GMT" text="#### v0.4.17 -- 1/4/22 by DW">
				<outline created="Tue, 04 Jan 2022 22:56:13 GMT" text="Added expandInclude in Node package. "></outline>
				</outline>
			<outline created="Tue, 04 Jan 2022 18:14:38 GMT" text="#### v0.4.15 -- 1/4/22 by DW">
				<outline created="Tue, 04 Jan 2022 18:14:46 GMT" text="Last night's release only worked in the client version. The Node package was broken. It should now be fixed. "></outline>
				<outline created="Tue, 04 Jan 2022 18:15:12 GMT" text="Also added a new &lt;a href=&quot;https://github.com/scripting/opmlPackage/tree/main/examples/markdown&quot;&gt;example app&lt;/a&gt; that demonstrates the reading and writing of markdown/outline files in a Node app. "></outline>
				</outline>
			<outline created="Mon, 03 Jan 2022 23:28:03 GMT" text="#### v0.4.12 -- 1/3/22 by DW">
				<outline created="Mon, 03 Jan 2022 23:28:15 GMT" text="Two new routines, opml.markdownToOutline and opml.outlineToMarkdown, to read and write markdown files that are used to represent outlines. This is an extended Markdown that LogSeq generates. The format does not have a name at this time, or as far as I know, a spec, but at least now there is JavaScript code that reads and writes the format. "></outline>
				<outline created="Mon, 03 Jan 2022 23:30:24 GMT" text="We are using this code in a new version of Drummer in the works. "></outline>
				<outline created="Mon, 03 Jan 2022 23:30:39 GMT" text="It is being discussed in this &lt;a href=&quot;https://github.com/scripting/drummerRFC/issues/4#issuecomment-1004157802&quot;&gt;thread&lt;/a&gt;. "></outline>
				</outline>
			<outline created="Fri, 24 Sep 2021 18:20:47 GMT" text="#### v0.4.10 -- 9/24/21 by DW">
				<outline created="Fri, 24 Sep 2021 18:18:34 GMT" text="New entry-point in the &lt;a href=&quot;https://github.com/scripting/opmlPackage/blob/main/client/opml.js&quot;&gt;client&lt;/a&gt;, opml.read. "></outline>
				<outline created="Fri, 24 Sep 2021 18:18:56 GMT" text="Reads an OPML file, returns a JavaScript object with the outline head and structure."></outline>
				<outline created="Fri, 24 Sep 2021 18:19:17 GMT" text="If options.flSubscribe is true, we ask to be notified when the file changes over a websocket. "></outline>
				<outline created="Fri, 24 Sep 2021 18:22:41 GMT" text="We call back to the same routine we called when the file was read, assuming it will do the same thing with the updated OPML."></outline>
				</outline>
			</outline>
		<outline created="Sun, 04 Jul 2021 16:07:12 GMT" text="#### Questions, comments?">
			<outline created="Sun, 04 Jul 2021 16:07:20 GMT" text="If you have any questions or comments please post an issue &lt;a href=&quot;https://github.com/scripting/opmlPackage/issues&quot;&gt;here&lt;/a&gt;. "></outline>
			</outline>
		</body>
	</opml>
